<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Design Paterns on Beyourself - a gopher</title>
    <link>http://beuself.xyz/categories/go-design-paterns/</link>
    <description>Recent content in Go Design Paterns on Beyourself - a gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Oct 2019 23:01:23 +0800</lastBuildDate>
    
	<atom:link href="http://beuself.xyz/categories/go-design-paterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>单例模式-Singleton</title>
      <link>http://beuself.xyz/post/go-paterns/creational/singleton/</link>
      <pubDate>Mon, 14 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/creational/singleton/</guid>
      <description>描述 Singleton，顾名思义，它将为您提供一个对象的单个实例，并保证没有重复项。这种类型的设计模式，属于创建型模式，它提供了一种创建对象</description>
    </item>
    
    <item>
      <title>原型模式-Prototype Pattern</title>
      <link>http://beuself.xyz/post/go-paterns/creational/prototype/</link>
      <pubDate>Mon, 14 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/creational/prototype/</guid>
      <description>描述 原型模式（prototype pattern）的目的是拥有一个或一组在编译时已经创建好的对象，但是您可以在运行时将其克隆任意多次。通常用于</description>
    </item>
    
    <item>
      <title>工厂方法-Factory Method</title>
      <link>http://beuself.xyz/post/go-paterns/creational/factory-method/</link>
      <pubDate>Mon, 14 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/creational/factory-method/</guid>
      <description>描述 工厂方法（Factory Method）可能是业内已知第二个好用的设计模式。其目的是使用户从特定目的所需实现的结构知识中抽象出来。例如，从</description>
    </item>
    
    <item>
      <title>建造者模式-Builder</title>
      <link>http://beuself.xyz/post/go-paterns/creational/builder/</link>
      <pubDate>Mon, 14 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/creational/builder/</guid>
      <description>描述 建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种</description>
    </item>
    
    <item>
      <title>抽象工厂-Abstract Factory</title>
      <link>http://beuself.xyz/post/go-paterns/creational/abstract-factory/</link>
      <pubDate>Mon, 14 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/creational/abstract-factory/</guid>
      <description>描述 抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该工厂又被称为其它工厂的工厂。 抽象工厂设计模式是一个新的</description>
    </item>
    
  </channel>
</rss>