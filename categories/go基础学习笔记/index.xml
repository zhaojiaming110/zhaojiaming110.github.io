<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go基础学习笔记 on Beyourself - a gopher</title>
    <link>http://beuself.xyz/categories/go%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in Go基础学习笔记 on Beyourself - a gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Oct 2019 16:01:23 +0800</lastBuildDate>
    
	<atom:link href="http://beuself.xyz/categories/go%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>广度优先算法</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 14 Oct 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</guid>
      <description>什么是广度优先算法 广度优先搜索算法（又称宽度优先搜索）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。Dijkstra单源</description>
    </item>
    
    <item>
      <title>搭建Golang开发环境</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/%E6%90%AD%E5%BB%BAgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sat, 21 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/%E6%90%AD%E5%BB%BAgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>搭建Golang开发环境 1.Sublime Text3 + GoSublime + Goimports + Go build ​ 安装sublime text3和GoSublime插件 2.Sublime Text3、Goimports和GoSub</description>
    </item>
    
    <item>
      <title>http标准库</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/http%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Fri, 20 Sep 2019 21:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/http%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>http 使用http客户端发送请求 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;net/http/httputil&amp;#34; ) func main() { resp, err := http.Get(&amp;#34;http://www.imooc.com&amp;#34;) if err != nil { panic(err) } defer resp.Body.Close() s, err := httputil.DumpResponse(resp, true) if err != nil</description>
    </item>
    
    <item>
      <title>GOPATH及目录结构</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-22-gopath%E5%8F%8A%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-22-gopath%E5%8F%8A%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</guid>
      <description>GOPATH环境变量： 默认在~/go(unix,linux)，%USERPROFIEL%\go(windows) 官方推荐：所有项目和第三方库</description>
    </item>
    
    <item>
      <title>Goroutine</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/20919-09-27-goroutine/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/20919-09-27-goroutine/</guid>
      <description>并发concurrency 很多人都是冲着Go大肆宣扬的高并发而忍不住跃跃欲试，但其实从源码解析来看，goroutine只是由官方实现的超级“</description>
    </item>
    
    <item>
      <title>Go开发学习路线指南</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-05-26-go%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-05-26-go%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%8C%87%E5%8D%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>map</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-21-map/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-21-map/</guid>
      <description>map是一堆键值对的未排序集合。 创建map 1 2 3 4 5 6 7 m1 := map[string]string { &amp;#34;name&amp;#34;: &amp;#34;zjm&amp;#34;, &amp;#34;age&amp;#34;: &amp;#34;26&amp;#34;, &amp;#34;country&amp;#34;: &amp;#34;CN&amp;#34;, } m2 := make(map[string]int) //m2 == empty map var m3 map[string]int //m3 == nil map map元素赋值 1 2 3 4 5 6 m1 := map[string]string {</description>
    </item>
    
    <item>
      <title>其它标准库</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/%E5%85%B6%E5%AE%83%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/%E5%85%B6%E5%AE%83%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>其它标准库 bufio log encoding/json time log regexp string/math/rand 如何看标准库文档 godoc -http :8888(包含本地第三方和自己写的包) golang中文网标准库</description>
    </item>
    
    <item>
      <title>内建变量类型</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-20-%E5%86%85%E5%BB%BA%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-20-%E5%86%85%E5%BB%BA%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</guid>
      <description>bool, string (u)int, (u)int8, (u)int16, (u)int32, (u)int64, uintptr(没有指定具体的bit大小但是足以容纳指针) byte(uint8等价类型)，byte类型一般用于强调数值是一个原</description>
    </item>
    
    <item>
      <title>函数</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-21-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-21-%E5%87%BD%E6%95%B0/</guid>
      <description>1 2 3 4 5 6 7 func Add(a int, b int) (ret int, err error) { if a &amp;lt; 0 || b &amp;lt; 0 { // 假设这个函数只支持两个非负数字的加法 err = errors.New(&amp;#34;Should be non-negative numbers!&amp;#34;) return } return a + b, nil // 支持多重返回值 } 函数定</description>
    </item>
    
    <item>
      <title>函数与闭包</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-24-%E5%87%BD%E6%95%B0%E4%B8%8E%E9%97%AD%E5%8C%85/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-24-%E5%87%BD%E6%95%B0%E4%B8%8E%E9%97%AD%E5%8C%85/</guid>
      <description>函数可以作为一种类型使用 匿名函数 在Go里面，函数可以像普通变量一样被传递或使用。 Go语言支持随时在代码里定义匿名函数。 匿名函数由一个不带函数</description>
    </item>
    
    <item>
      <title>切片</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-21-%E5%88%87%E7%89%87/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-21-%E5%88%87%E7%89%87/</guid>
      <description>1 2 3 4 5 6 7 func main() { arr := [...]int{0, 1, 2, 3, 4, 5, 6, 7} fmt.Println(&amp;#34;arr[2:6] = &amp;#34;, arr[2:6]) fmt.Println(&amp;#34;arr[:6] = &amp;#34;, arr[:6]) fmt.Println(&amp;#34;arr[2:] = &amp;#34;, arr[2:]) fmt.Println(&amp;#34;arr[:] = &amp;#34;, arr[:]) } 运行结果 1 2 3 4 arr[2:6] = [2 3 4 5] arr[:6] = [0 1 2 3 4 5] arr[2:] = [2 3 4 5 6 7] arr[:] = [0</description>
    </item>
    
    <item>
      <title>包和封装</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-22-%E5%8C%85%E5%92%8C%E5%B0%81%E8%A3%85/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-22-%E5%8C%85%E5%92%8C%E5%B0%81%E8%A3%85/</guid>
      <description>封装 名字一般使用CamelCase 首字母大写：public 首字母小写：private 包 每个目录只能有一个包。 main包包含可执行入口。 为结构</description>
    </item>
    
    <item>
      <title>变量</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-20-%E5%8F%98%E9%87%8F/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-20-%E5%8F%98%E9%87%8F/</guid>
      <description>1.单个变量的声明与赋值 变量的声明格式：var &amp;lt;变量名称&amp;gt; &amp;lt;变量类型&amp;gt; 变量的赋值格式：&amp;lt;变量名称&amp;gt; = &amp;l</description>
    </item>
    
    <item>
      <title>字符和字符串处理</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-21-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-21-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</guid>
      <description>ASCII ASCII是基于拉丁字母的一套电脑编码系统，主要用于显示英文字母和其它西欧语言。 标准ASCII码也叫基础ASCII码，使用7位二进制数（剩</description>
    </item>
    
    <item>
      <title>常用的系统接口</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-23-%E5%B8%B8%E7%94%A8%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-23-%E5%B8%B8%E7%94%A8%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3/</guid>
      <description>Stringer Reader/Writer</description>
    </item>
    
    <item>
      <title>常量与枚举</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-20-%E5%B8%B8%E9%87%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-20-%E5%B8%B8%E9%87%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/</guid>
      <description>1.常量的定义 常量的值在编译时就已经确定 常量的定义格式与变量基本相同 等号右侧必须是常量或常量表达式 常量表达式中的函数必须是内置函数 2.常量的</description>
    </item>
    
    <item>
      <title>循环语句</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-21-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-21-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</guid>
      <description>1 2 3 4 sum := 0 for i := 1; i &amp;lt;= 100; i++ { sum += i } 使用循环语句时需要注意以下几点： 左花括号{必须与for处于同一行。 Go语言中的for循环与C语言一样</description>
    </item>
    
    <item>
      <title>性能调优</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-26-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-26-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>扩展已有类型</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/2019-09-22-%E6%89%A9%E5%B1%95%E5%B7%B2%E6%9C%89%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/2019-09-22-%E6%89%A9%E5%B1%95%E5%B7%B2%E6%9C%89%E7%B1%BB%E5%9E%8B/</guid>
      <description>扩充系统类型或者别人的类型 使用组合： 1 2 3 4 5 6 package tree type Node struct { value int Left, Right *Node } 1 2 3 4 package main type myTreeNode struct { node *tree.Node } 定义别名： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
  </channel>
</rss>