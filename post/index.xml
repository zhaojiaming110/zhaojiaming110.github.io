<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Beyourself - a gopher</title>
    <link>http://beuself.xyz/post/</link>
    <description>Recent content in Posts on Beyourself - a gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Nov 2019 23:01:23 +0800</lastBuildDate>
    
	<atom:link href="http://beuself.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1-链表简介</title>
      <link>http://beuself.xyz/post/date-structures-with-go/%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B/</guid>
      <description>像数组一样，链表是一个线性数据结构。与数组不同，链接列表元素不存储在连续位置；元素使用指针链接。 为什么要使用链表？ 数组可用于存储相似类型的线</description>
    </item>
    
    <item>
      <title>3-插入节点</title>
      <link>http://beuself.xyz/post/date-structures-with-go/%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9/</guid>
      <description>在上一篇文章中，我们介绍了链接列表。我们还创建了一个具有3个节点的简单链表，并讨论了链表遍历。 本文中讨论的所有程序均考虑以下链表的表示形式。</description>
    </item>
    
    <item>
      <title>单任务版爬虫</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%89%88%E7%88%AC%E8%99%AB/</link>
      <pubDate>Sat, 19 Oct 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%89%88%E7%88%AC%E8%99%AB/</guid>
      <description>单任务版爬虫 设计目标： 获取并打印所有城市第一页用户的详细信息 获取网页内容（fetch）: 使用http.Get获取内容 使用Encoding来转</description>
    </item>
    
    <item>
      <title>1-1建造者模式-Builder</title>
      <link>http://beuself.xyz/post/go-paterns/builder/</link>
      <pubDate>Mon, 14 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/builder/</guid>
      <description>无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发送机等各种部件。而对于大多数用</description>
    </item>
    
    <item>
      <title>Go-Paterns项目进度</title>
      <link>http://beuself.xyz/post/go-paterns/go-paterns%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6/</link>
      <pubDate>Mon, 14 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/go-paterns%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6/</guid>
      <description>分类 Creational Patterns Pattern Description URL Builder Provides an interface for creating families of releated objects Go Factory Method Defers instantiation of an object to a specialized function for creating instances Go Singleton Restricts instantiation of a type to one object Go</description>
    </item>
    
    <item>
      <title>1-2工厂方法-Factory Method</title>
      <link>http://beuself.xyz/post/go-paterns/factory_method/</link>
      <pubDate>Mon, 14 Oct 2019 22:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/factory_method/</guid>
      <description>工厂方法（Factory Method）属于创建型模式，它提供了一种创建对象的最佳方式。在工厂方法中，我们在创建对象时不会对客户端暴露创建逻辑</description>
    </item>
    
    <item>
      <title>1-3单例模式-Singleton</title>
      <link>http://beuself.xyz/post/go-paterns/singleton/</link>
      <pubDate>Mon, 14 Oct 2019 20:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/singleton/</guid>
      <description>单例设计模式-在整个程序中有一个类型的唯一实例 您是否曾经对软件工程师进行过采访？有趣的是，当您向他们询问设计模式时，超过80％的人会提及 Si</description>
    </item>
    
    <item>
      <title>广度优先算法</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 14 Oct 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</guid>
      <description>什么是广度优先算法 广度优先搜索算法（又称宽度优先搜索）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。Dijkstra单源</description>
    </item>
    
    <item>
      <title>0026-Remove Duplicates from Sorted Array</title>
      <link>http://beuself.xyz/post/go-leetcode/0026%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</link>
      <pubDate>Sun, 13 Oct 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/0026%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid>
      <description>题目： 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地</description>
    </item>
    
    <item>
      <title>0-前言</title>
      <link>http://beuself.xyz/post/go-microservices/0-%E5%89%8D%E8%A8%80/</link>
      <pubDate>Thu, 10 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-microservices/0-%E5%89%8D%E8%A8%80/</guid>
      <description>说明 本博客主要是记录对building-microservices-go这本书的学习笔记。 博客涵盖的内容 1.微服务简介 微服务*简介*，*介绍</description>
    </item>
    
    <item>
      <title>1-1.使用net/http构建一个简单的web服务器</title>
      <link>http://beuself.xyz/post/go-microservices/1-1%E4%BD%BF%E7%94%A8nethttp%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Thu, 10 Oct 2019 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-microservices/1-1%E4%BD%BF%E7%94%A8nethttp%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>net/http net/http包提供了编写http客户端和服务器所需的所有功能。它使我们能够向使用http协议进行通信的其他服务器发送请求，并使我们能够</description>
    </item>
    
    <item>
      <title>1-2.读写json</title>
      <link>http://beuself.xyz/post/go-microservices/1-2%E8%AF%BB%E5%86%99json/</link>
      <pubDate>Thu, 10 Oct 2019 22:00:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-microservices/1-2%E8%AF%BB%E5%86%99json/</guid>
      <description>感谢encoding/json包，它内置在标准库中，可轻松快速地对go类型的JSON进行编码和解码。它实现了简单的marshal和unmar</description>
    </item>
    
    <item>
      <title>搭建Golang开发环境</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/%E6%90%AD%E5%BB%BAgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sat, 21 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/%E6%90%AD%E5%BB%BAgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>搭建Golang开发环境 1.Sublime Text3 + GoSublime + Goimports + Go build ​ 安装sublime text3和GoSublime插件 2.Sublime Text3、Goimports和GoSub</description>
    </item>
    
    <item>
      <title>http标准库</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/http%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Fri, 20 Sep 2019 21:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/http%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>http 使用http客户端发送请求 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;net/http/httputil&amp;#34; ) func main() { resp, err := http.Get(&amp;#34;http://www.imooc.com&amp;#34;) if err != nil { panic(err) } defer resp.Body.Close() s, err := httputil.DumpResponse(resp, true) if err != nil</description>
    </item>
    
    <item>
      <title>0001-Two Sum</title>
      <link>http://beuself.xyz/post/go-leetcode/0001%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/0001%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>题目： 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应</description>
    </item>
    
    <item>
      <title>0011-Container With Most Water</title>
      <link>http://beuself.xyz/post/go-leetcode/0011%E7%9B%9B%E6%9C%80%E5%A4%9A%E8%B0%81%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/0011%E7%9B%9B%E6%9C%80%E5%A4%9A%E8%B0%81%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>题目描述 给定 n 个非负整数 a1，a2，&amp;hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai)</description>
    </item>
    
    <item>
      <title>0015-3Sum</title>
      <link>http://beuself.xyz/post/go-leetcode/0015%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/0015%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>题目描述 给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。 注意：</description>
    </item>
    
    <item>
      <title>0016-3Sum Closest</title>
      <link>http://beuself.xyz/post/go-leetcode/0016%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/0016%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>题目描述 给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存</description>
    </item>
    
    <item>
      <title>0018-4Sum</title>
      <link>http://beuself.xyz/post/go-leetcode/0018%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/0018%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>题目描述 给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所</description>
    </item>
    
    <item>
      <title>0027-Remove Element</title>
      <link>http://beuself.xyz/post/go-leetcode/0027%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/0027%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</guid>
      <description>题目： 给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入</description>
    </item>
    
  </channel>
</rss>