<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Beyourself - a gopher</title>
    <link>http://beuself.xyz/post/</link>
    <description>Recent content in Posts on Beyourself - a gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Oct 2019 16:01:23 +0800</lastBuildDate>
    
	<atom:link href="http://beuself.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>单任务版爬虫</title>
      <link>http://beuself.xyz/post/%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%89%88%E7%88%AC%E8%99%AB/</link>
      <pubDate>Sat, 19 Oct 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%89%88%E7%88%AC%E8%99%AB/</guid>
      <description>单任务版爬虫 设计目标： 获取并打印所有城市第一页用户的详细信息 获取网页内容（fetch）: 使用http.Get获取内容 使用Encoding来转</description>
    </item>
    
    <item>
      <title>1-1建造者模式-Builder</title>
      <link>http://beuself.xyz/post/builder/</link>
      <pubDate>Mon, 14 Oct 2019 20:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/builder/</guid>
      <description>无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发送机等各种部件。而对于大多数用</description>
    </item>
    
    <item>
      <title>1-2工厂方法-Factory Method</title>
      <link>http://beuself.xyz/post/factory_method/</link>
      <pubDate>Mon, 14 Oct 2019 20:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/factory_method/</guid>
      <description>工厂方法（Factory Method）属于创建型模式，它提供了一种创建对象的最佳方式。在工厂方法中，我们在创建对象时不会对客户端暴露创建逻辑</description>
    </item>
    
    <item>
      <title>1-3单例模式-Singleton</title>
      <link>http://beuself.xyz/post/singleton/</link>
      <pubDate>Mon, 14 Oct 2019 20:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/singleton/</guid>
      <description>单例设计模式-在整个程序中有一个类型的唯一实例 您是否曾经对软件工程师进行过采访？有趣的是，当您向他们询问设计模式时，超过80％的人会提及 Si</description>
    </item>
    
    <item>
      <title>广度优先算法</title>
      <link>http://beuself.xyz/post/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 14 Oct 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</guid>
      <description>什么是广度优先算法 广度优先搜索算法（又称宽度优先搜索）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。Dijkstra单源</description>
    </item>
    
    <item>
      <title>1-2删除排序数组中的重复项</title>
      <link>http://beuself.xyz/post/2019-09-22-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</link>
      <pubDate>Sun, 13 Oct 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/2019-09-22-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid>
      <description>题目： 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地</description>
    </item>
    
    <item>
      <title>0-前言</title>
      <link>http://beuself.xyz/post/0-%E5%89%8D%E8%A8%80/</link>
      <pubDate>Thu, 10 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/0-%E5%89%8D%E8%A8%80/</guid>
      <description>说明 本博客主要是记录对building-microservices-go这本书的学习笔记。 博客涵盖的内容 1.微服务简介 微服务*简介*，*介绍</description>
    </item>
    
    <item>
      <title>1-1.使用net/http构建一个简单的web服务器</title>
      <link>http://beuself.xyz/post/1-1%E4%BD%BF%E7%94%A8nethttp%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Thu, 10 Oct 2019 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/1-1%E4%BD%BF%E7%94%A8nethttp%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>net/http net/http包提供了编写http客户端和服务器所需的所有功能。它使我们能够向使用http协议进行通信的其他服务器发送请求，并使我们能够</description>
    </item>
    
    <item>
      <title>1-2.读写json</title>
      <link>http://beuself.xyz/post/1-2%E8%AF%BB%E5%86%99json/</link>
      <pubDate>Thu, 10 Oct 2019 22:00:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/1-2%E8%AF%BB%E5%86%99json/</guid>
      <description>感谢encoding/json包，它内置在标准库中，可轻松快速地对go类型的JSON进行编码和解码。它实现了简单的marshal和unmar</description>
    </item>
    
    <item>
      <title>搭建Golang开发环境</title>
      <link>http://beuself.xyz/post/%E6%90%AD%E5%BB%BAgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sat, 21 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E6%90%AD%E5%BB%BAgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>搭建Golang开发环境 1.Sublime Text3 + GoSublime + Goimports + Go build ​ 安装sublime text3和GoSublime插件 2.Sublime Text3、Goimports和GoSub</description>
    </item>
    
    <item>
      <title>1-1两数之和</title>
      <link>http://beuself.xyz/post/2019-09-22-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/2019-09-22-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>题目： 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应</description>
    </item>
    
    <item>
      <title>1-3移除元素</title>
      <link>http://beuself.xyz/post/2019-09-22-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/2019-09-22-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</guid>
      <description>题目： 给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入</description>
    </item>
    
    <item>
      <title>GOPATH及目录结构</title>
      <link>http://beuself.xyz/post/2019-09-22-gopath%E5%8F%8A%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/2019-09-22-gopath%E5%8F%8A%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</guid>
      <description>GOPATH环境变量： 默认在~/go(unix,linux)，%USERPROFIEL%\go(windows) 官方推荐：所有项目和第三方库</description>
    </item>
    
    <item>
      <title>Goroutine</title>
      <link>http://beuself.xyz/post/20919-09-27-goroutine/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/20919-09-27-goroutine/</guid>
      <description>并发concurrency 很多人都是冲着Go大肆宣扬的高并发而忍不住跃跃欲试，但其实从源码解析来看，goroutine只是由官方实现的超级“</description>
    </item>
    
    <item>
      <title>Go开发学习路线指南</title>
      <link>http://beuself.xyz/post/2019-05-26-go%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/2019-05-26-go%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%8C%87%E5%8D%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>http标准库</title>
      <link>http://beuself.xyz/post/http%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/http%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>http 使用http客户端发送请求 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;net/http/httputil&amp;#34; ) func main() { resp, err := http.Get(&amp;#34;http://www.imooc.com&amp;#34;) if err != nil { panic(err) } defer resp.Body.Close() s, err := httputil.DumpResponse(resp, true) if err != nil</description>
    </item>
    
    <item>
      <title>map</title>
      <link>http://beuself.xyz/post/2019-09-21-map/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/2019-09-21-map/</guid>
      <description>map是一堆键值对的未排序集合。 创建map 1 2 3 4 5 6 7 m1 := map[string]string { &amp;#34;name&amp;#34;: &amp;#34;zjm&amp;#34;, &amp;#34;age&amp;#34;: &amp;#34;26&amp;#34;, &amp;#34;country&amp;#34;: &amp;#34;CN&amp;#34;, } m2 := make(map[string]int) //m2 == empty map var m3 map[string]int //m3 == nil map map元素赋值 1 2 3 4 5 6 m1 := map[string]string {</description>
    </item>
    
    <item>
      <title>其它标准库</title>
      <link>http://beuself.xyz/post/%E5%85%B6%E5%AE%83%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E5%85%B6%E5%AE%83%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>其它标准库 bufio log encoding/json time log regexp string/math/rand 如何看标准库文档 godoc -http :8888(包含本地第三方和自己写的包) golang中文网标准库</description>
    </item>
    
    <item>
      <title>内建变量类型</title>
      <link>http://beuself.xyz/post/2019-09-20-%E5%86%85%E5%BB%BA%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/2019-09-20-%E5%86%85%E5%BB%BA%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</guid>
      <description>bool, string int, (u)int8, (u)int16, (u)int32, (u)int64, uintptr(没有指定具体的bit大小但是足以容纳指针) byte(uint8等价类型)，byte类型一般用于强调数值是一个原</description>
    </item>
    
    <item>
      <title>函数</title>
      <link>http://beuself.xyz/post/2019-09-21-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/2019-09-21-%E5%87%BD%E6%95%B0/</guid>
      <description>1 2 3 4 5 6 7 func Add(a int, b int) (ret int, err error) { if a &amp;lt; 0 || b &amp;lt; 0 { // 假设这个函数只支持两个非负数字的加法 err = errors.New(&amp;#34;Should be non-negative numbers!&amp;#34;) return } return a + b, nil // 支持多重返回值 } 函数定</description>
    </item>
    
  </channel>
</rss>