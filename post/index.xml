<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Beyourself - a gopher</title>
    <link>http://beuself.xyz/post/</link>
    <description>Recent content in Posts on Beyourself - a gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 31 Mar 2020 16:01:23 +0800</lastBuildDate>
    
	<atom:link href="http://beuself.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>0002-两数相加</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0002%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0002%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
      <description>题目描述 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。 如果，我们</description>
    </item>
    
    <item>
      <title>0019-删除链表的倒数第n个节点</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0019%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0019%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>题目描述 给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 示例 1 2 3 给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 n = 2. 当删除了倒数第二个节点后，链表变为 1-&amp;gt;2-&amp;gt;3-&amp;gt;5.</description>
    </item>
    
    <item>
      <title>0021-合并两个有序链表</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0021%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0021%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>题目描述 将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例 1 2 输入：1-&amp;gt;2-&amp;gt;4</description>
    </item>
    
    <item>
      <title>0024-两两交换链表中的节点</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0024-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0024-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</guid>
      <description>题目描述 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。 示例 1 给定 1-&amp;gt;2-&amp;gt;3-&amp;gt;4,</description>
    </item>
    
    <item>
      <title>LeetCode</title>
      <link>http://beuself.xyz/post/leetcode/</link>
      <pubDate>Sun, 01 Mar 2020 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/leetcode/</guid>
      <description>使用Go解答LeetCode  Linkedlist Github 0002两数相加 0019删除链表的倒数第n个节点 0021合并两个有序链表 0024两两交换链表中的节点</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>http://beuself.xyz/post/mysql/</link>
      <pubDate>Sun, 01 Mar 2020 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/mysql/</guid>
      <description>mysql简介 安装mysql</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>http://beuself.xyz/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 01 Mar 2020 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>Queue List</description>
    </item>
    
    <item>
      <title>算法</title>
      <link>http://beuself.xyz/post/%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 01 Mar 2020 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E7%AE%97%E6%B3%95/</guid>
      <description>排序</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>http://beuself.xyz/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 01 Mar 2020 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>建造者模式</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://beuself.xyz/post/docker/docker/</link>
      <pubDate>Fri, 10 Jan 2020 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/docker/docker/</guid>
      <description>Docker核心概念</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>http://beuself.xyz/post/git/</link>
      <pubDate>Fri, 10 Jan 2020 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/git/</guid>
      <description>Git命令行 创建初始版本库 1 git init [版本库name] Git 不关心你是从一个完全空白的目录还是由一个装满文件的目录开始的。在这两种情况下，将目录转换</description>
    </item>
    
    <item>
      <title>0-1线性数据结构</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-1%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-1%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据结构是在计算机中组织数据以便有效使用的一种特殊方式。这个想法是为了减少不同任务的时间和空间复杂度。以下是一些流行的线性数据结构的概述。 Array</description>
    </item>
    
    <item>
      <title>0-4通过简单的示例了解时间复杂度</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-4%E9%80%9A%E8%BF%87%E7%AE%80%E5%8D%95%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%BA%86%E8%A7%A3%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-4%E9%80%9A%E8%BF%87%E7%AE%80%E5%8D%95%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%BA%86%E8%A7%A3%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>很多初学者在理解时间复杂度的概念时会感到困惑，但是在本文中，我们将用一个非常简单的示例来解释它： 想象一下一个教室，有100个学生，您将钢笔交</description>
    </item>
    
    <item>
      <title>0-5什么是空间复杂度</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-5%E4%BB%80%E4%B9%88%E6%98%AF%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-5%E4%BB%80%E4%B9%88%E6%98%AF%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>空间复杂度: ​ 空间复杂度一词在许多地方被误用于辅助空间。以下是辅助空间和空间复杂度的正确定义。 辅助空间是算法使用的额外空间或临时空间。 算法的</description>
    </item>
    
    <item>
      <title>0-6时间复杂度分析的实践问题</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-6%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E7%9A%84%E5%AE%9E%E8%B7%B5%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-6%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E7%9A%84%E5%AE%9E%E8%B7%B5%E9%97%AE%E9%A2%98/</guid>
      <description>1.以下代码的时间，空间复杂度是多少？ 1 2 3 4 5 6 7 a, b := 0, 0 for i := 0; i &amp;lt; N; i++ { a = a + 1 } for j := 0; j &amp;lt; M; j++ { b = b + 1 } 选项： O（N * M）</description>
    </item>
    
    <item>
      <title>1-5-删除节点（指定位置）</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-5%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-5%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/</guid>
      <description>给定一个链表和一个位置，请删除给定位置的链表节点。 Example 1 2 3 4 5 Input: position = 1, Linked List = 8-&amp;gt;2-&amp;gt;3-&amp;gt;1-&amp;gt;7 Output: Linked List = 8-&amp;gt;3-&amp;gt;1-&amp;gt;7 Input: position = 0, Linked List = 8-&amp;gt;2-&amp;gt;3-&amp;gt;1-&amp;gt;7 Output: Linked List = 2-&amp;gt;3-&amp;gt;1-&amp;gt;7 思路 如果要删除的节点是根节</description>
    </item>
    
    <item>
      <title>1-5删除链表</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-6%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-6%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8/</guid>
      <description>**C / C ++的算法：**遍历链表并一一删除所有节点。 在Go中，会发生自动垃圾收集，因此删除链接列表很容易。我们只需要将head更改为nil。 实</description>
    </item>
    
    <item>
      <title>1-7链表的长度（迭代和递归）</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-7%E9%93%BE%E8%A1%A8%E7%9A%84%E9%95%BF%E5%BA%A6%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%BD%92/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-7%E9%93%BE%E8%A1%A8%E7%9A%84%E9%95%BF%E5%BA%A6%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%BD%92/</guid>
      <description>编写一个函数以计算给定单链表中的节点数。 Example 对于链接列表1-&amp;gt; 3-&amp;gt; 1-&amp;gt; 2-&amp;gt; 1，该函数应返回5。 迭代 初始化计数为0 循环迭代 实现 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>1-链表简介</title>
      <link>http://beuself.xyz/post/date-structures-with-go/%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B/</guid>
      <description>像数组一样，链表是一个线性数据结构。与数组不同，链接列表元素不存储在连续位置；元素使用指针链接。 为什么要使用链表？ 数组可用于存储相似类型的线</description>
    </item>
    
    <item>
      <title>2-1双链表简介及插入</title>
      <link>http://beuself.xyz/post/date-structures-with-go/double-linked-list/2-1%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B%E5%8F%8A%E6%8F%92%E5%85%A5/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/double-linked-list/2-1%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B%E5%8F%8A%E6%8F%92%E5%85%A5/</guid>
      <description>在前面的一些文章Singly Linked List我们介绍了单链表，接下来我们继续学习双链表（Double Linked List 简称DLL）。 介绍 一个双链表包含一个额外的</description>
    </item>
    
  </channel>
</rss>