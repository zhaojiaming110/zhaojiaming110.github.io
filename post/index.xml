<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Beyourself - a gopher</title>
    <link>http://beuself.xyz/post/</link>
    <description>Recent content in Posts on Beyourself - a gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Apr 2020 22:02:23 +0800</lastBuildDate>
    
	<atom:link href="http://beuself.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设计模式</title>
      <link>http://beuself.xyz/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 08 Apr 2020 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>http://beuself.xyz/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 07 Apr 2020 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>list 列表作为一种抽象数据类型，列表对象应支持以下操作接口。 操作接口 功能 适用对象 Size() 报告列表当前的规模（节点总数） 列表 First()、Last()</description>
    </item>
    
    <item>
      <title>LeetCode</title>
      <link>http://beuself.xyz/post/leetcode/</link>
      <pubDate>Mon, 06 Apr 2020 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/leetcode/</guid>
      <description>Linkedlist # Title Blog Github 0002 Add Two Numbers Go Go 0019 Remove Nth Node From End of List Go Go 0021 Merge Two Sorted Lists Go Go 0024 Swap Nodes in Pairs Go Go 0061 Rotate List Go Go 0082 Remove Duplicates from Sorted List II Go Go 0083 Remove Duplicates from Sorted List Go Go 0086 Partition List Go Go 0206 Reverse Linked List Go Go</description>
    </item>
    
    <item>
      <title>0002-两数相加</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0002%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0002%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
      <description>题目描述 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。 如果，我们</description>
    </item>
    
    <item>
      <title>0019-删除链表的倒数第n个节点</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0019%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0019%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>题目描述 给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 示例 1 2 3 给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 n = 2. 当删除了倒数第二个节点后，链表变为 1-&amp;gt;2-&amp;gt;3-&amp;gt;5.</description>
    </item>
    
    <item>
      <title>0021-合并两个有序链表</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0021%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0021%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>题目描述 将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例 1 2 输入：1-&amp;gt;2-&amp;gt;4</description>
    </item>
    
    <item>
      <title>0024-两两交换链表中的节点</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0024-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0024-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</guid>
      <description>题目描述 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。 示例 1 给定 1-&amp;gt;2-&amp;gt;3-&amp;gt;4,</description>
    </item>
    
    <item>
      <title>0061-旋转链表</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0061%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0061%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>题目描述 给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。 示例 1 2 3 4 5 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, k = 2 输出: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL 解释: 向右旋转 1 步: 5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;NULL 向</description>
    </item>
    
    <item>
      <title>0082-删除排序链表中的重复元素 II</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0082%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0082%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii/</guid>
      <description>题目描述 给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。 示例 1 2 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5 输出: 1-&amp;gt;2-&amp;gt;5 解题 迭代法 解题思路 使用快慢</description>
    </item>
    
    <item>
      <title>0083-删除排序链表中的重复元素</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0083%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0083%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</guid>
      <description>题目描述 给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。 示例 1 2 输入: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;3 输出: 1-&amp;gt;2-&amp;gt;3 解题 迭代法 解题思路 直接遍历链表，比较当前节点和</description>
    </item>
    
    <item>
      <title>0086-分隔链表</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0086%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0086%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</guid>
      <description>题目描述 给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。 你应当保留两个分区中每个节点的初始相对位</description>
    </item>
    
    <item>
      <title>0206-反转链表</title>
      <link>http://beuself.xyz/post/go-leetcode/linkedlist/0206%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 31 Mar 2020 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-leetcode/linkedlist/0206%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>题目描述 反转一个单链表，你可以迭代或递归地反转单链表。 示例 1 2 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL 输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL 解题 迭代法 解题思路 遍历链表，将当前节点的Next指针指向前一个</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>http://beuself.xyz/post/mysql/</link>
      <pubDate>Sun, 01 Mar 2020 22:02:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/mysql/</guid>
      <description>mysql简介 安装mysql</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://beuself.xyz/post/docker/docker/</link>
      <pubDate>Fri, 10 Jan 2020 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/docker/docker/</guid>
      <description>Docker核心概念</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>http://beuself.xyz/post/git/</link>
      <pubDate>Fri, 10 Jan 2020 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/git/</guid>
      <description>Git命令行 创建初始版本库 1 git init [版本库name] Git 不关心你是从一个完全空白的目录还是由一个装满文件的目录开始的。在这两种情况下，将目录转换</description>
    </item>
    
    <item>
      <title>0-1线性数据结构</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-1%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-1%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据结构是在计算机中组织数据以便有效使用的一种特殊方式。这个想法是为了减少不同任务的时间和空间复杂度。以下是一些流行的线性数据结构的概述。 Array</description>
    </item>
    
    <item>
      <title>0-4通过简单的示例了解时间复杂度</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-4%E9%80%9A%E8%BF%87%E7%AE%80%E5%8D%95%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%BA%86%E8%A7%A3%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-4%E9%80%9A%E8%BF%87%E7%AE%80%E5%8D%95%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%BA%86%E8%A7%A3%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>很多初学者在理解时间复杂度的概念时会感到困惑，但是在本文中，我们将用一个非常简单的示例来解释它： 想象一下一个教室，有100个学生，您将钢笔交</description>
    </item>
    
    <item>
      <title>0-5什么是空间复杂度</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-5%E4%BB%80%E4%B9%88%E6%98%AF%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-5%E4%BB%80%E4%B9%88%E6%98%AF%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>空间复杂度: ​ 空间复杂度一词在许多地方被误用于辅助空间。以下是辅助空间和空间复杂度的正确定义。 辅助空间是算法使用的额外空间或临时空间。 算法的</description>
    </item>
    
    <item>
      <title>0-6时间复杂度分析的实践问题</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-6%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E7%9A%84%E5%AE%9E%E8%B7%B5%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-6%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E7%9A%84%E5%AE%9E%E8%B7%B5%E9%97%AE%E9%A2%98/</guid>
      <description>1.以下代码的时间，空间复杂度是多少？ 1 2 3 4 5 6 7 a, b := 0, 0 for i := 0; i &amp;lt; N; i++ { a = a + 1 } for j := 0; j &amp;lt; M; j++ { b = b + 1 } 选项： O（N * M）</description>
    </item>
    
    <item>
      <title>1-5-删除节点（指定位置）</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-5%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-5%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/</guid>
      <description>给定一个链表和一个位置，请删除给定位置的链表节点。 Example 1 2 3 4 5 Input: position = 1, Linked List = 8-&amp;gt;2-&amp;gt;3-&amp;gt;1-&amp;gt;7 Output: Linked List = 8-&amp;gt;3-&amp;gt;1-&amp;gt;7 Input: position = 0, Linked List = 8-&amp;gt;2-&amp;gt;3-&amp;gt;1-&amp;gt;7 Output: Linked List = 2-&amp;gt;3-&amp;gt;1-&amp;gt;7 思路 如果要删除的节点是根节</description>
    </item>
    
  </channel>
</rss>