<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Beyourself - a gopher</title>
    <link>http://beuself.xyz/post/</link>
    <description>Recent content in Posts on Beyourself - a gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Jan 2020 23:01:23 +0800</lastBuildDate>
    
	<atom:link href="http://beuself.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git</title>
      <link>http://beuself.xyz/post/git/</link>
      <pubDate>Fri, 10 Jan 2020 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/git/</guid>
      <description>Git命令行 创建初始版本库 1 git init [版本库name] Git 不关心你是从一个完全空白的目录还是由一个装满文件的目录开始的。在这两种情况下，将目录转换</description>
    </item>
    
    <item>
      <title>0-1线性数据结构</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-1%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-1%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据结构是在计算机中组织数据以便有效使用的一种特殊方式。这个想法是为了减少不同任务的时间和空间复杂度。以下是一些流行的线性数据结构的概述。 Array</description>
    </item>
    
    <item>
      <title>0-4通过简单的示例了解时间复杂度</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-4%E9%80%9A%E8%BF%87%E7%AE%80%E5%8D%95%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%BA%86%E8%A7%A3%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-4%E9%80%9A%E8%BF%87%E7%AE%80%E5%8D%95%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%BA%86%E8%A7%A3%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>很多初学者在理解时间复杂度的概念时会感到困惑，但是在本文中，我们将用一个非常简单的示例来解释它： 想象一下一个教室，有100个学生，您将钢笔交</description>
    </item>
    
    <item>
      <title>0-5什么是空间复杂度</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-5%E4%BB%80%E4%B9%88%E6%98%AF%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-5%E4%BB%80%E4%B9%88%E6%98%AF%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>空间复杂度: ​ 空间复杂度一词在许多地方被误用于辅助空间。以下是辅助空间和空间复杂度的正确定义。 辅助空间是算法使用的额外空间或临时空间。 算法的</description>
    </item>
    
    <item>
      <title>0-6时间复杂度分析的实践问题</title>
      <link>http://beuself.xyz/post/date-structures-with-go/overview/0-6%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E7%9A%84%E5%AE%9E%E8%B7%B5%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/overview/0-6%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E7%9A%84%E5%AE%9E%E8%B7%B5%E9%97%AE%E9%A2%98/</guid>
      <description>1.以下代码的时间，空间复杂度是多少？ 1 2 3 4 5 6 7 a, b := 0, 0 for i := 0; i &amp;lt; N; i++ { a = a + 1 } for j := 0; j &amp;lt; M; j++ { b = b + 1 } 选项： O（N * M）</description>
    </item>
    
    <item>
      <title>1-5-删除节点（指定位置）</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-5%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-5%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/</guid>
      <description>给定一个链表和一个位置，请删除给定位置的链表节点。 Example 1 2 3 4 5 Input: position = 1, Linked List = 8-&amp;gt;2-&amp;gt;3-&amp;gt;1-&amp;gt;7 Output: Linked List = 8-&amp;gt;3-&amp;gt;1-&amp;gt;7 Input: position = 0, Linked List = 8-&amp;gt;2-&amp;gt;3-&amp;gt;1-&amp;gt;7 Output: Linked List = 2-&amp;gt;3-&amp;gt;1-&amp;gt;7 思路 如果要删除的节点是根节</description>
    </item>
    
    <item>
      <title>1-5删除链表</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-6%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-6%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8/</guid>
      <description>C / C ++的算法：遍历链表并一一删除所有节点。 在Go中，会发生自动垃圾收集，因此删除链接列表很容易。我们只需要将head更改为nil。 实现方</description>
    </item>
    
    <item>
      <title>1-7链表的长度（迭代和递归）</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-7%E9%93%BE%E8%A1%A8%E7%9A%84%E9%95%BF%E5%BA%A6%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%BD%92/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-7%E9%93%BE%E8%A1%A8%E7%9A%84%E9%95%BF%E5%BA%A6%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%BD%92/</guid>
      <description>编写一个函数以计算给定单链表中的节点数。 Example 对于链接列表1-&amp;gt; 3-&amp;gt; 1-&amp;gt; 2-&amp;gt; 1，该函数应返回5。 迭代 初始化计数为0 循环迭代 实现 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>1-链表简介</title>
      <link>http://beuself.xyz/post/date-structures-with-go/%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B/</guid>
      <description>像数组一样，链表是一个线性数据结构。与数组不同，链接列表元素不存储在连续位置；元素使用指针链接。 为什么要使用链表？ 数组可用于存储相似类型的线</description>
    </item>
    
    <item>
      <title>2-1双链表简介及插入</title>
      <link>http://beuself.xyz/post/date-structures-with-go/double-linked-list/2-1%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B%E5%8F%8A%E6%8F%92%E5%85%A5/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/double-linked-list/2-1%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B%E5%8F%8A%E6%8F%92%E5%85%A5/</guid>
      <description>在前面的一些文章Singly Linked List我们介绍了单链表，接下来我们继续学习双链表（Double Linked List 简称DLL）。 介绍 一个双链表包含一个额外的</description>
    </item>
    
    <item>
      <title>3-插入节点</title>
      <link>http://beuself.xyz/post/date-structures-with-go/%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9/</guid>
      <description>在上一篇文章中，我们介绍了链表。我们还创建了一个具有3个节点的简单链表，并讨论了链表遍历。 本文中讨论的所有程序均考虑以下链表的表示形式。 1 2</description>
    </item>
    
    <item>
      <title>4-删除节点（指定key）</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-4%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9Akey/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-4%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9Akey/</guid>
      <description>我们在前面几篇文章讨论了关于单链表的“链表介绍”和“插入节点”。 让我们制定问题陈述以了解删除过程。给定一个“key”，删除此键在链表中的第一</description>
    </item>
    
    <item>
      <title>Queue</title>
      <link>http://beuself.xyz/post/date-structures-with-go/queue/queue/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/queue/queue/</guid>
      <description>入队与出队 与栈一样，队列(queue)也是存放数据对象的一种容器，其中的数据对象也按线性的逻辑次序排列。队列结构同样支持对象的插入和删除，但</description>
    </item>
    
    <item>
      <title>渐进复杂度</title>
      <link>http://beuself.xyz/post/algorithms/overview/%E6%B8%90%E8%BF%9B%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/algorithms/overview/%E6%B8%90%E8%BF%9B%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>渐进复杂度：大O记号 常系数项可省略 低次项可省略 $O()$构成了$T(n)$的上界，比如 $n^c$ = $O(2^n)$ Ω()构成了$T(n)$的下届，比如$</description>
    </item>
    
    <item>
      <title>算法分析</title>
      <link>http://beuself.xyz/post/algorithms/overview/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/algorithms/overview/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</guid>
      <description>级数 迭代 取非极端元素 问题：给定整数子集S，|S| = n &amp;gt;= 3 ​ 找出S中元素a，a不是最大值也不是最小值 算法：从S中任取三个元素x,y,z，确定并</description>
    </item>
    
    <item>
      <title>计算机与算法</title>
      <link>http://beuself.xyz/post/algorithms/overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/algorithms/overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E7%AE%97%E6%B3%95/</guid>
      <description>计算：算法 计算模型 = 计算机 = 信息处理工具 所谓算法，即特定计算模型下，旨在解决特定问题的指令序列 输入 待处理的信息（问题） 输出 经处理的信息（答案</description>
    </item>
    
    <item>
      <title>迭代与递归</title>
      <link>http://beuself.xyz/post/algorithms/overview/%E8%BF%AD%E4%BB%A3%E4%B8%8E%E9%80%92%E5%BD%92/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/algorithms/overview/%E8%BF%AD%E4%BB%A3%E4%B8%8E%E9%80%92%E5%BD%92/</guid>
      <description>减而治之（Decrease-and-conquer） 除非特别说明外，空间复杂度一般都指的是除了输入所占的空间外其它我们所需要、计算另加的空间</description>
    </item>
    
    <item>
      <title>单任务版爬虫</title>
      <link>http://beuself.xyz/post/go-basic-knowledge/%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%89%88%E7%88%AC%E8%99%AB/</link>
      <pubDate>Sat, 19 Oct 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-basic-knowledge/%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%89%88%E7%88%AC%E8%99%AB/</guid>
      <description>单任务版爬虫 设计目标： 获取并打印所有城市第一页用户的详细信息 获取网页内容（fetch）: 使用http.Get获取内容 使用Encoding来转</description>
    </item>
    
    <item>
      <title>1-1建造者模式-Builder</title>
      <link>http://beuself.xyz/post/go-paterns/builder/</link>
      <pubDate>Mon, 14 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/builder/</guid>
      <description>无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发送机等各种部件。而对于大多数用</description>
    </item>
    
    <item>
      <title>Go-Paterns项目进度</title>
      <link>http://beuself.xyz/post/go-paterns/go-paterns%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6/</link>
      <pubDate>Mon, 14 Oct 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/go-paterns/go-paterns%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6/</guid>
      <description>分类 Creational Patterns Pattern Description URL Builder Provides an interface for creating families of releated objects Go Factory Method Defers instantiation of an object to a specialized function for creating instances Go Singleton Restricts instantiation of a type to one object Go</description>
    </item>
    
  </channel>
</rss>