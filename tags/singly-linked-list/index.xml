<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Singly Linked List on Beyourself - a gopher</title>
    <link>http://beuself.xyz/tags/singly-linked-list/</link>
    <description>Recent content in Singly Linked List on Beyourself - a gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Nov 2019 23:01:23 +0800</lastBuildDate>
    
	<atom:link href="http://beuself.xyz/tags/singly-linked-list/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1-5-删除节点（指定位置）</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-5%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-5%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/</guid>
      <description>给定一个链表和一个位置，请删除给定位置的链表节点。 Example 1 2 3 4 5 Input: position = 1, Linked List = 8-&amp;gt;2-&amp;gt;3-&amp;gt;1-&amp;gt;7 Output: Linked List = 8-&amp;gt;3-&amp;gt;1-&amp;gt;7 Input: position = 0, Linked List = 8-&amp;gt;2-&amp;gt;3-&amp;gt;1-&amp;gt;7 Output: Linked List = 2-&amp;gt;3-&amp;gt;1-&amp;gt;7 思路 如果要删除的节点是根节</description>
    </item>
    
    <item>
      <title>1-5删除链表</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-6%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-6%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8/</guid>
      <description>**C / C ++的算法：**遍历链表并一一删除所有节点。 在Go中，会发生自动垃圾收集，因此删除链接列表很容易。我们只需要将head更改为nil。 实</description>
    </item>
    
    <item>
      <title>1-7链表的长度（迭代和递归）</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-7%E9%93%BE%E8%A1%A8%E7%9A%84%E9%95%BF%E5%BA%A6%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%BD%92/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-7%E9%93%BE%E8%A1%A8%E7%9A%84%E9%95%BF%E5%BA%A6%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%BD%92/</guid>
      <description>编写一个函数以计算给定单链表中的节点数。 Example 对于链接列表1-&amp;gt; 3-&amp;gt; 1-&amp;gt; 2-&amp;gt; 1，该函数应返回5。 迭代 初始化计数为0 循环迭代 实现 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>1-链表简介</title>
      <link>http://beuself.xyz/post/date-structures-with-go/%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/%E9%93%BE%E8%A1%A8%E7%AE%80%E4%BB%8B/</guid>
      <description>像数组一样，链表是一个线性数据结构。与数组不同，链接列表元素不存储在连续位置；元素使用指针链接。 为什么要使用链表？ 数组可用于存储相似类型的线</description>
    </item>
    
    <item>
      <title>3-插入节点</title>
      <link>http://beuself.xyz/post/date-structures-with-go/%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9/</guid>
      <description>在上一篇文章中，我们介绍了链表。我们还创建了一个具有3个节点的简单链表，并讨论了链表遍历。 本文中讨论的所有程序均考虑以下链表的表示形式。 1 2</description>
    </item>
    
    <item>
      <title>4-删除节点（指定key）</title>
      <link>http://beuself.xyz/post/date-structures-with-go/1-4%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9Akey/</link>
      <pubDate>Sun, 10 Nov 2019 23:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/date-structures-with-go/1-4%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%8C%87%E5%AE%9Akey/</guid>
      <description>我们在前面几篇文章讨论了关于单链表的“链表介绍”和“插入节点”。 让我们制定问题陈述以了解删除过程。给定一个“key”，删除此键在链表中的第一</description>
    </item>
    
  </channel>
</rss>