<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发编程 on Beyourself - a gopher</title>
    <link>http://beuself.xyz/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 并发编程 on Beyourself - a gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 20 Sep 2019 16:01:23 +0800</lastBuildDate>
    
	<atom:link href="http://beuself.xyz/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Goroutine</title>
      <link>http://beuself.xyz/post/20919-09-27-goroutine/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/20919-09-27-goroutine/</guid>
      <description>并发concurrency 很多人都是冲着Go大肆宣扬的高并发而忍不住跃跃欲试，但其实从源码解析来看，goroutine只是由官方实现的超级“</description>
    </item>
    
    <item>
      <title>测试文档</title>
      <link>http://beuself.xyz/post/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/</guid>
      <description>并发concurrency 很多人都是冲着Go大肆宣扬的高并发而忍不住跃跃欲试，但其实从源码解析来看，goroutine只是由官方实现的超级“</description>
    </item>
    
    <item>
      <title>通道</title>
      <link>http://beuself.xyz/post/%E9%80%9A%E9%81%93/</link>
      <pubDate>Fri, 20 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>http://beuself.xyz/post/%E9%80%9A%E9%81%93/</guid>
      <description>无缓冲的通道(unbuffered channel)是指在接收前没有能力保存任何值的通道。这种类型的通 道要求发送 goroutine 和接收 goroutine 同时准备好，才能完成</description>
    </item>
    
  </channel>
</rss>